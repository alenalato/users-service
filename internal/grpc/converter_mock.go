// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alenalato/users-service/internal/grpc (interfaces: modelConverter)
//
// Generated by this command:
//
//	mockgen -destination=converter_mock.go -package=grpc github.com/alenalato/users-service/internal/grpc modelConverter
//

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	reflect "reflect"

	businesslogic "github.com/alenalato/users-service/internal/businesslogic"
	grpc "github.com/alenalato/users-service/pkg/grpc"
	gomock "go.uber.org/mock/gomock"
)

// MockmodelConverter is a mock of modelConverter interface.
type MockmodelConverter struct {
	ctrl     *gomock.Controller
	recorder *MockmodelConverterMockRecorder
	isgomock struct{}
}

// MockmodelConverterMockRecorder is the mock recorder for MockmodelConverter.
type MockmodelConverterMockRecorder struct {
	mock *MockmodelConverter
}

// NewMockmodelConverter creates a new mock instance.
func NewMockmodelConverter(ctrl *gomock.Controller) *MockmodelConverter {
	mock := &MockmodelConverter{ctrl: ctrl}
	mock.recorder = &MockmodelConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmodelConverter) EXPECT() *MockmodelConverterMockRecorder {
	return m.recorder
}

// fromGrpcCreateUserRequestToModel mocks base method.
func (m *MockmodelConverter) fromGrpcCreateUserRequestToModel(ctx context.Context, req *grpc.CreateUserRequest) businesslogic.UserDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromGrpcCreateUserRequestToModel", ctx, req)
	ret0, _ := ret[0].(businesslogic.UserDetails)
	return ret0
}

// fromGrpcCreateUserRequestToModel indicates an expected call of fromGrpcCreateUserRequestToModel.
func (mr *MockmodelConverterMockRecorder) fromGrpcCreateUserRequestToModel(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromGrpcCreateUserRequestToModel", reflect.TypeOf((*MockmodelConverter)(nil).fromGrpcCreateUserRequestToModel), ctx, req)
}

// fromGrpcListUsersRequestToModel mocks base method.
func (m *MockmodelConverter) fromGrpcListUsersRequestToModel(ctx context.Context, req *grpc.ListUsersRequest) businesslogic.UserFilter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromGrpcListUsersRequestToModel", ctx, req)
	ret0, _ := ret[0].(businesslogic.UserFilter)
	return ret0
}

// fromGrpcListUsersRequestToModel indicates an expected call of fromGrpcListUsersRequestToModel.
func (mr *MockmodelConverterMockRecorder) fromGrpcListUsersRequestToModel(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromGrpcListUsersRequestToModel", reflect.TypeOf((*MockmodelConverter)(nil).fromGrpcListUsersRequestToModel), ctx, req)
}

// fromGrpcUpdateUserRequestToModel mocks base method.
func (m *MockmodelConverter) fromGrpcUpdateUserRequestToModel(ctx context.Context, req *grpc.UpdateUserRequest) businesslogic.UserUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromGrpcUpdateUserRequestToModel", ctx, req)
	ret0, _ := ret[0].(businesslogic.UserUpdate)
	return ret0
}

// fromGrpcUpdateUserRequestToModel indicates an expected call of fromGrpcUpdateUserRequestToModel.
func (mr *MockmodelConverterMockRecorder) fromGrpcUpdateUserRequestToModel(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromGrpcUpdateUserRequestToModel", reflect.TypeOf((*MockmodelConverter)(nil).fromGrpcUpdateUserRequestToModel), ctx, req)
}

// fromModelUserToGrpc mocks base method.
func (m *MockmodelConverter) fromModelUserToGrpc(ctx context.Context, user businesslogic.User) *grpc.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromModelUserToGrpc", ctx, user)
	ret0, _ := ret[0].(*grpc.User)
	return ret0
}

// fromModelUserToGrpc indicates an expected call of fromModelUserToGrpc.
func (mr *MockmodelConverterMockRecorder) fromModelUserToGrpc(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromModelUserToGrpc", reflect.TypeOf((*MockmodelConverter)(nil).fromModelUserToGrpc), ctx, user)
}
