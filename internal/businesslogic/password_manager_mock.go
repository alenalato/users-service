// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alenalato/users-service/internal/businesslogic (interfaces: PasswordManager)
//
// Generated by this command:
//
//	mockgen -destination=password_manager_mock.go -package=businesslogic github.com/alenalato/users-service/internal/businesslogic PasswordManager
//

// Package businesslogic is a generated GoMock package.
package businesslogic

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPasswordManager is a mock of PasswordManager interface.
type MockPasswordManager struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerMockRecorder
	isgomock struct{}
}

// MockPasswordManagerMockRecorder is the mock recorder for MockPasswordManager.
type MockPasswordManagerMockRecorder struct {
	mock *MockPasswordManager
}

// NewMockPasswordManager creates a new mock instance.
func NewMockPasswordManager(ctrl *gomock.Controller) *MockPasswordManager {
	mock := &MockPasswordManager{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManager) EXPECT() *MockPasswordManagerMockRecorder {
	return m.recorder
}

// GeneratePasswordHash mocks base method.
func (m *MockPasswordManager) GeneratePasswordHash(ctx context.Context, passwordDetails *PasswordDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePasswordHash", ctx, passwordDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// GeneratePasswordHash indicates an expected call of GeneratePasswordHash.
func (mr *MockPasswordManagerMockRecorder) GeneratePasswordHash(ctx, passwordDetails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePasswordHash", reflect.TypeOf((*MockPasswordManager)(nil).GeneratePasswordHash), ctx, passwordDetails)
}

// VerifyPassword mocks base method.
func (m *MockPasswordManager) VerifyPassword(ctx context.Context, password string, passwordDetails *PasswordDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", ctx, password, passwordDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockPasswordManagerMockRecorder) VerifyPassword(ctx, password, passwordDetails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockPasswordManager)(nil).VerifyPassword), ctx, password, passwordDetails)
}
