// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alenalato/users-service/internal/businesslogic/user (interfaces: modelConverter)
//
// Generated by this command:
//
//	mockgen -destination=coverter_mock.go -package=user github.com/alenalato/users-service/internal/businesslogic/user modelConverter
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	businesslogic "github.com/alenalato/users-service/internal/businesslogic"
	events "github.com/alenalato/users-service/internal/events"
	storage "github.com/alenalato/users-service/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockmodelConverter is a mock of modelConverter interface.
type MockmodelConverter struct {
	ctrl     *gomock.Controller
	recorder *MockmodelConverterMockRecorder
	isgomock struct{}
}

// MockmodelConverterMockRecorder is the mock recorder for MockmodelConverter.
type MockmodelConverterMockRecorder struct {
	mock *MockmodelConverter
}

// NewMockmodelConverter creates a new mock instance.
func NewMockmodelConverter(ctrl *gomock.Controller) *MockmodelConverter {
	mock := &MockmodelConverter{ctrl: ctrl}
	mock.recorder = &MockmodelConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmodelConverter) EXPECT() *MockmodelConverterMockRecorder {
	return m.recorder
}

// fromModelUserDetailsToStorage mocks base method.
func (m *MockmodelConverter) fromModelUserDetailsToStorage(ctx context.Context, userDetails businesslogic.UserDetails) storage.UserDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromModelUserDetailsToStorage", ctx, userDetails)
	ret0, _ := ret[0].(storage.UserDetails)
	return ret0
}

// fromModelUserDetailsToStorage indicates an expected call of fromModelUserDetailsToStorage.
func (mr *MockmodelConverterMockRecorder) fromModelUserDetailsToStorage(ctx, userDetails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromModelUserDetailsToStorage", reflect.TypeOf((*MockmodelConverter)(nil).fromModelUserDetailsToStorage), ctx, userDetails)
}

// fromModelUserFilterToStorage mocks base method.
func (m *MockmodelConverter) fromModelUserFilterToStorage(ctx context.Context, userFilter businesslogic.UserFilter) storage.UserFilter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromModelUserFilterToStorage", ctx, userFilter)
	ret0, _ := ret[0].(storage.UserFilter)
	return ret0
}

// fromModelUserFilterToStorage indicates an expected call of fromModelUserFilterToStorage.
func (mr *MockmodelConverterMockRecorder) fromModelUserFilterToStorage(ctx, userFilter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromModelUserFilterToStorage", reflect.TypeOf((*MockmodelConverter)(nil).fromModelUserFilterToStorage), ctx, userFilter)
}

// fromModelUserToEvent mocks base method.
func (m *MockmodelConverter) fromModelUserToEvent(ctx context.Context, user businesslogic.User) events.UserEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromModelUserToEvent", ctx, user)
	ret0, _ := ret[0].(events.UserEvent)
	return ret0
}

// fromModelUserToEvent indicates an expected call of fromModelUserToEvent.
func (mr *MockmodelConverterMockRecorder) fromModelUserToEvent(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromModelUserToEvent", reflect.TypeOf((*MockmodelConverter)(nil).fromModelUserToEvent), ctx, user)
}

// fromModelUserUpdateToStorage mocks base method.
func (m *MockmodelConverter) fromModelUserUpdateToStorage(ctx context.Context, userUpdate businesslogic.UserUpdate) (storage.UserUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromModelUserUpdateToStorage", ctx, userUpdate)
	ret0, _ := ret[0].(storage.UserUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fromModelUserUpdateToStorage indicates an expected call of fromModelUserUpdateToStorage.
func (mr *MockmodelConverterMockRecorder) fromModelUserUpdateToStorage(ctx, userUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromModelUserUpdateToStorage", reflect.TypeOf((*MockmodelConverter)(nil).fromModelUserUpdateToStorage), ctx, userUpdate)
}

// fromStorageUserToModel mocks base method.
func (m *MockmodelConverter) fromStorageUserToModel(ctx context.Context, user storage.User) businesslogic.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromStorageUserToModel", ctx, user)
	ret0, _ := ret[0].(businesslogic.User)
	return ret0
}

// fromStorageUserToModel indicates an expected call of fromStorageUserToModel.
func (mr *MockmodelConverterMockRecorder) fromStorageUserToModel(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromStorageUserToModel", reflect.TypeOf((*MockmodelConverter)(nil).fromStorageUserToModel), ctx, user)
}
